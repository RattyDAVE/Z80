SER_BUFSIZE EQU     3FH 
SER_FULLSIZE EQU    30H 
SER_EMPTYSIZE EQU   5 

RTS_HIGH    EQU     0D6H 
RTS_LOW     EQU     096H 

SERBUF      EQU     $8000 
SERINPTR    EQU     serBuf+SER_BUFSIZE 
SERRDPTR    EQU     serInPtr+2 
SERBUFUSED  EQU     serRdPtr+2 

TEMPSTACK   EQU     $80ED 

            .ORG    $0000 
                    ;------------------------------------------------------------------------------
                    ; Reset

RST00:      DI      
            JP      INIT ;Initialize Hardware and go

                    ;------------------------------------------------------------------------------
                    ; TX a character over RS232

            .ORG    0008H 
RST08:      JP      TXA 

                    ;------------------------------------------------------------------------------
                    ; RX a character over RS232 Channel A [Console], hold here until char ready.

            .ORG    0010H 
RST10:      JP      RXA 

                    ;------------------------------------------------------------------------------
                    ; Check serial status

            .ORG    0018H 
RST18:      JP      CKINCHAR 

                    ;------------------------------------------------------------------------------
                    ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]

            .ORG    0038H 
RST38:      JR      serialInt 

                    ;------------------------------------------------------------------------------
SERIALINT:  PUSH    AF 
            PUSH    HL 

            IN      A,($80) 
            AND     $01 ; Check if interupt due to read buffer full
            JR      Z,rts0 ; if not, ignore

            IN      A,($81) 
            PUSH    AF 
            LD      A,(serBufUsed) 
            CP      SER_BUFSIZE ; If full then ignore
            JR      NZ,notFull 
            POP     AF 
            JR      rts0 

NOTFULL:    LD      HL,(serInPtr) 
            INC     HL 
            LD      A,L ; Only need to check low byte becasuse buffer<256 bytes
            CP      (serBuf+SER_BUFSIZE) & $FF 
            JR      NZ,notWrap 
            LD      HL,serBuf 
NOTWRAP:    LD      (serInPtr),HL 
            POP     AF 
            LD      (HL),A 
            LD      A,(serBufUsed) 
            INC     A 
            LD      (serBufUsed),A 
            CP      SER_FULLSIZE 
            JR      C,rts0 
            LD      A,RTS_HIGH 
            OUT     ($80),A 
RTS0:       POP     HL 
            POP     AF 
            EI      
            RETI    

                    ;------------------------------------------------------------------------------
RXA:                
WAITFORCHAR:
            LD     A,(serBufUsed) 
            CP      $00 
            JR      Z,waitForChar 
            PUSH    HL 
            LD      HL,(serRdPtr) 
            INC     HL 
            LD      A,L ; Only need to check low byte becasuse buffer<256 bytes
            CP      (serBuf+SER_BUFSIZE) & $FF 
            JR      NZ,notRdWrap 
            LD      HL,serBuf 
NOTRDWRAP:  
            DI      
            LD      (serRdPtr),HL 
            LD      A,(serBufUsed) 
            DEC     A 
            LD      (serBufUsed),A 
            CP      SER_EMPTYSIZE 
            JR      NC,rts1 
            LD      A,RTS_LOW 
            OUT     ($80),A 
RTS1:               
            LD      A,(HL) 
            EI      
            POP     HL 
            RET     ; Char ready in A

                    ;------------------------------------------------------------------------------
TXA:        
            PUSH    AF ; Store character
CONOUT1:    
            IN      A,($80) ; Status byte
            BIT     1,A ; Set Zero flag if still transmitting character
            JR      Z,conout1 ; Loop until flag signals ready
            POP     AF ; Retrieve character
            OUT     ($81),A ; Output the character
            RET     

                    ;------------------------------------------------------------------------------
CKINCHAR:   
            LD      A,(serBufUsed) 
            CP      $0 
            RET     

PRINT:      
            LD      A,(HL) ; Get character
            OR      A ; Is it $00 ?
            RET     Z ; Then RETurn on terminator
            RST     08H ; Print it
            INC     HL ; Next Character
            JR      PRINT ; Continue until $00
            RET     
                    ;------------------------------------------------------------------------------
INIT:               
            LD      HL,TEMPSTACK ; Temp stack
            LD      SP,HL ; Set up a temporary stack
            LD      HL,serBuf 
            LD      (serInPtr),HL 
            LD      (serRdPtr),HL 
            XOR     A ;0 to accumulator
            LD      (serBufUsed),A 
            LD      A,RTS_LOW 
            OUT     ($80),A ; Initialise ACIA
            IM      1 
            EI      
            ;JP      INIT2 ; Start user program.

                    ;-------------------------------------------------------------------------------
                    ;-------------------------------------------------------------------------------
                    ;-------------------------------------------------------------------------------
