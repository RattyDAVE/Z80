LINES       EQU     25 
COLS        EQU     64



.ORG    $F800 ; 0xFFFF - 2048

START:              ;di              ; disable interrupts
            LD      hl,$FFFF ; set new stack location
            LD      sp,hl ; to $FFFF
            LD      a,$03 
            OUT     ($80),a ; ACIA master reset
            LD      a,$96 ; Initialize ACIA
            OUT     ($80),a 
            EI      
                    ;di


MAINF:      LD      hl,initstr 
            CALL    print 

WAITCOL:    CALL    RX ; wait for ':'
            LD      a,l 
            CP      ':' 
            JP      nz,waitcol 
            LD      ix,0 ; reset ix to compute checksum
            CALL    readbyte ; read byte count
            LD      b,h ; store it in bc
            LD      c,l ; 
            CALL    readbyte ; read upper byte of address
            LD      d,l ; store in d
            CALL    readbyte ; read lower byte of address
            LD      e,l ; store in e
            CALL    readbyte ; read record type
            LD      a,l ; store in a
            CP      01 ; check if record type is 01 (end of file)
            JR      z,endload 
            CP      00 ; check if record type is 00 (data)
            JR      nz,invtype ; if not, error

READDATA:   CALL    readbyte 
            LD      a,l 
            LD      (de),a 
            INC     de 
            DEC     bc 
            LD      a,0 ; check if bc==0
            OR      b 
            OR      c 
            CP      0 
            JR      nz,readdata ; if not, loop

                    ;ld a, '|'
                    ;call TX
            CALL    readbyte ; read checksum
            LD      a,ixl ; lower byte of ix should be 0
            CP      0 
            JR      nz,badck 

            LD      a,'*' 
            CALL    TX 
            JP      waitcol 

ENDLOAD:    CALL    readbyte ; read last checksum (not used)
            LD      hl,loadokstr 
            CALL    print 
            LD      hl,$8080 
            JP      (hl) 
                    ;jp hang

INVTYPE:    LD      hl,invalidtypestr 
            CALL    print 
            JP      hang 

BADCK:      LD      hl,badchecksumstr 
            CALL    print 
            JP      hang 

HANG:               
            NOP     
            JP      hang 

TX:         PUSH    af 
TXBUSY:     IN      a,($80) ; read serial status
            BIT     1,a ; check status bit 1
            JR      z,txbusy ; loop if zero (serial is busy)
            POP     af 
            OUT     ($81),a ; transmit the character
            RET     

RX:                 
            PUSH    af 
WAITCH:             ;in a, ($80)
                    ;bit 0, a
                    ;jr z, waitch
                    ;in a, ($81)
                    ;ld h, 0
            RST     $10 
            LD      l,a 
                    ;call TX
            POP     af 
            RET     

PRINT:              
            LD      a,(hl) 
            OR      a 
            RET     z 
            CALL    TX 
            INC     hl 
            JP      print 

READBYTE:           
            PUSH    af 
            PUSH    de 
            CALL    RX 
            LD      a,l 
            SUB     '0' 
            CP      10 
            JR      c,rnib2 ; if a<10 read the second nibble
            SUB     7 ; else subtract 'A'-'0' (17) and add 10
RNIB2:      LD      d,a ; temporary store the first nibble in d
            CALL    RX 
            LD      a,l 
            SUB     '0' 
            CP      10 
            JR      c,rend ; if a<10 finalize
            SUB     7 ; else subtract 'A' (17) and add 10
REND:       LD      e,a ; temporary store the second nibble in e
            SLA     d ; shift register d left by 4 bits
            SLA     d 
            SLA     d 
            SLA     d 
            OR      d 
            POP     de 
            LD      h,0 
            LD      l,a 
            POP     af 
            PUSH    bc ; add the byte read to ix (for checksum)
            LD      b,0 
            LD      c,l 
            ADD     ix,bc 
            POP     bc 
            RET     

INITSTR:    DS      "HEX LOADER by Filippo Bergamasco",10,13,0 
INVALIDTYPESTR: DS  10,13,"INV TYP",0 
BADCHECKSUMSTR: DS  10,13,"BAD CHK",0 
LOADOKSTR:  DS      10,13,"OK",0 
